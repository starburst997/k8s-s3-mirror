# Complete example of using S3 proxy as a sidecar with dedicated PostgreSQL
# This creates a self-contained application with its own S3 proxy and database
---
apiVersion: v1
kind: Namespace
metadata:
  name: myapp
---
# PostgreSQL PVC for persistent storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myapp-postgres-pvc
  namespace: myapp
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# ConfigMap for S3 endpoints
apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-s3-config
  namespace: myapp
data:
  MAIN_S3_ENDPOINT: "https://s3.amazonaws.com"
  MIRROR_S3_ENDPOINT: "https://s3.us-west-000.backblazeb2.com"
  # Optional: Prefix mirror buckets with app name
  MIRROR_BUCKET_PREFIX: "myapp-backup-"
---
# Secret for S3 credentials
apiVersion: v1
kind: Secret
metadata:
  name: myapp-s3-secrets
  namespace: myapp
type: Opaque
stringData:
  # Main S3 credentials
  MAIN_ACCESS_KEY: "your-main-access-key"
  MAIN_SECRET_KEY: "your-main-secret-key"
  # Mirror S3 credentials
  MIRROR_ACCESS_KEY: "your-mirror-access-key"
  MIRROR_SECRET_KEY: "your-mirror-secret-key"
  # PostgreSQL credentials
  POSTGRES_PASSWORD: "mysecretpassword"
---
# Service for PostgreSQL (only accessible within the pod)
apiVersion: v1
kind: Service
metadata:
  name: myapp-postgres
  namespace: myapp
spec:
  type: ClusterIP
  clusterIP: None # Headless service
  selector:
    app: myapp
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
---
# Main deployment with app, S3 proxy sidecar, and PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: myapp
  labels:
    app: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      # Shared volume for Unix socket communication (optional optimization)
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: myapp-postgres-pvc
        - name: shared-socket
          emptyDir: {}

      containers:
        # 1. Main application container
        - name: app
          image: your-app:latest
          ports:
            - containerPort: 3000
              name: http
          env:
            # Configure app to use local S3 proxy via localhost
            - name: S3_ENDPOINT
              value: "http://localhost:8080"
            # No S3 credentials needed - proxy handles auth
            - name: S3_FORCE_PATH_STYLE
              value: "true"
            # Your app configuration
            - name: APP_BUCKET
              value: "myapp-data"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"

        # 2. S3 Proxy sidecar
        - name: s3-proxy
          image: ghcr.io/starburst997/s3-mirror:latest
          ports:
            - containerPort: 8080
              name: s3-proxy
          env:
            - name: MAIN_S3_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: myapp-s3-config
                  key: MAIN_S3_ENDPOINT
            - name: MAIN_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: myapp-s3-secrets
                  key: MAIN_ACCESS_KEY
            - name: MAIN_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: myapp-s3-secrets
                  key: MAIN_SECRET_KEY
            - name: MIRROR_S3_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: myapp-s3-config
                  key: MIRROR_S3_ENDPOINT
            - name: MIRROR_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: myapp-s3-secrets
                  key: MIRROR_ACCESS_KEY
            - name: MIRROR_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: myapp-s3-secrets
                  key: MIRROR_SECRET_KEY
            - name: MIRROR_BUCKET_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: myapp-s3-config
                  key: MIRROR_BUCKET_PREFIX
            # Connect to local PostgreSQL
            - name: POSTGRES_URL
              value: "postgres://myapp:$(POSTGRES_PASSWORD)@localhost:5432/s3_mirror?sslmode=disable"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: myapp-s3-secrets
                  key: POSTGRES_PASSWORD
            # Reduced logging for sidecar
            - name: LOG_LEVEL
              value: "error"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          livenessProbe:
            tcpSocket:
              port: s3-proxy
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: s3-proxy
            initialDelaySeconds: 5
            periodSeconds: 5

        # 3. PostgreSQL container
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_USER
              value: "myapp"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: myapp-s3-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              value: "s3_mirror"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - myapp
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - myapp
            initialDelaySeconds: 5
            periodSeconds: 5

---
# Optional: HPA for autoscaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: myapp-hpa
  namespace: myapp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: myapp
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
