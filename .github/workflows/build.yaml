name: Build and Publish

on:
  push:
    branches:
      - main
      - develop
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit tests
        run: |
          go mod download
          go test -v ./...

      - name: Run integration tests
        env:
          MAIN_S3_ENDPOINT: ${{ secrets.TEST_MAIN_S3_ENDPOINT }}
          MAIN_ACCESS_KEY: ${{ secrets.TEST_MAIN_ACCESS_KEY }}
          MAIN_SECRET_KEY: ${{ secrets.TEST_MAIN_SECRET_KEY }}
          MIRROR_S3_ENDPOINT: ${{ secrets.TEST_MIRROR_S3_ENDPOINT }}
          MIRROR_ACCESS_KEY: ${{ secrets.TEST_MIRROR_ACCESS_KEY }}
          MIRROR_SECRET_KEY: ${{ secrets.TEST_MIRROR_SECRET_KEY }}
          MIRROR_BUCKET_PREFIX: "mirror-"
          TEST_BUCKET: "s3-mirror"
        run: |
          # Create .env file for docker-compose
          cat > test/.env <<EOF
          MAIN_S3_ENDPOINT=${MAIN_S3_ENDPOINT}
          MAIN_ACCESS_KEY=${MAIN_ACCESS_KEY}
          MAIN_SECRET_KEY=${MAIN_SECRET_KEY}
          MIRROR_S3_ENDPOINT=${MIRROR_S3_ENDPOINT}
          MIRROR_ACCESS_KEY=${MIRROR_ACCESS_KEY}
          MIRROR_SECRET_KEY=${MIRROR_SECRET_KEY}
          MIRROR_BUCKET_PREFIX=${MIRROR_BUCKET_PREFIX}
          EOF

          # Start services
          cd test
          docker compose up -d --build

          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 10

          # Run test suite
          if ! docker compose exec -T test-client node index.js test ${TEST_BUCKET}; then
            echo "::error::Integration tests failed"
            docker compose logs s3-proxy
            docker compose down -v
            exit 1
          fi

          echo "âœ… Integration tests passed successfully"

          # Cleanup
          docker compose down -v

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
